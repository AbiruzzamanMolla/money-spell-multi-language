Directory structure:
└── money-spell-multi-languages/
    ├── README.md
    ├── composer.json
    ├── examples/
    │   └── demo.php
    ├── src/
    │   ├── SpellMoney.php
    │   ├── Contracts/
    │   │   └── LanguageInterface.php
    │   └── Languages/
    │       ├── Arabic.php
    │       ├── Bangla.php
    │       ├── Chinese.php
    │       ├── English.php
    │       ├── Hindi.php
    │       └── Thai.php
    ├── tests/
    │   └── SpellMoneyTest.php
    └── .github/
        └── workflows/
            └── tests.yml

================================================
FILE: README.md
================================================
Error reading file with 'cp1252': 'charmap' codec can't decode byte 0x81 in position 1498: character maps to <undefined>


================================================
FILE: composer.json
================================================
{
    "name": "azmolla/spell-money-multilang",
    "version": "1.0.2",
    "description": "Convert numbers to words for money in Bangla, English, Hindi, Chinese, Thai, and Arabic. Extensible to any language.",
    "type": "library",
    "license": "MIT",
    "keywords": [
        "php",
        "money",
        "numbers",
        "spell",
        "words",
        "multilanguage",
        "bangla",
        "english",
        "hindi",
        "arabic",
        "thai",
        "chinese",
        "library"
    ],
    "authors": [
        {
            "name": "Abiruzzaman Molla",
            "email": "abiruzzaman.molla@gmail.com",
            "role": "Backend Developer",
            "homepage": "https://github.com/AbiruzzamanMolla"
        }
    ],
    "homepage": "https://github.com/AbiruzzamanMolla/money-spell-multi-language",
    "repository": {
        "type": "git",
        "url": "https://github.com/AbiruzzamanMolla/money-spell-multi-language.git"
    },
    "bugs": {
        "url": "https://github.com/AbiruzzamanMolla/money-spell-multi-language/issues"
    },
    "autoload": {
        "psr-4": {
            "AzMolla\\SpellMoney\\": "src/"
        }
    },
    "require": {
        "php": "^8.1"
    },
    "require-dev": {
        "phpunit/phpunit": "^10.3"
    }
}



================================================
FILE: examples/demo.php
================================================
<?php

require __DIR__ . '/../vendor/autoload.php';

use AzMolla\SpellMoney\Languages\Arabic;
use AzMolla\SpellMoney\Languages\Bangla;
use AzMolla\SpellMoney\Languages\Chinese;
use AzMolla\SpellMoney\Languages\English;
use AzMolla\SpellMoney\Languages\Hindi;
use AzMolla\SpellMoney\Languages\Thai;
use AzMolla\SpellMoney\SpellMoney;

$amounts = [
    "Bangla"  => ["cls" => Bangla::class, "num" => "১২৩৪৫.৫০"],
    "English" => ["cls" => English::class, "num" => "12345.50"],
    "Hindi"   => ["cls" => Hindi::class, "num" => "१२३४५.५०"],
    "Chinese" => ["cls" => Chinese::class, "num" => "１２３４５.５０"],
    "Thai"    => ["cls" => Thai::class, "num" => "๑๒๓๔๕.๕๐"],
    "Arabic"  => ["cls" => Arabic::class, "num" => "١٢٣٤٥.٥٠"],
];

foreach ($amounts as $lang => $data) {
    $spell = new SpellMoney(new $data["cls"]());
    echo "[$lang] " . $spell->spell($data["num"]) . PHP_EOL;
}



================================================
FILE: src/SpellMoney.php
================================================
<?php

namespace AzMolla\SpellMoney;

use AzMolla\SpellMoney\Contracts\LanguageInterface;
use AzMolla\SpellMoney\Languages\Bangla;

class SpellMoney
{
    private LanguageInterface $language;

    /**
     * @param LanguageInterface $language
     */
    public function __construct(?LanguageInterface $language = null)
    {
        $this->language = $language ?? new Bangla();
    }

    /**
     * @param $number
     */
    public function spell($number): string
    {
        $number = $this->language->normalizeNumber((string) $number);

        $parts   = explode('.', number_format((float) $number, 2, '.', ''));
        $integer = (int) $parts[0];
        $decimal = (int) $parts[1];

        $words = $this->language->toWords($integer) . ' ' . $this->language->getCurrency();
        if ($decimal > 0) {
            $words .= ' ' . $this->language->toWords($decimal) . ' ' . $this->language->getSubCurrency();
        }
        return trim($words);
    }
}



================================================
FILE: src/Contracts/LanguageInterface.php
================================================
<?php

namespace AzMolla\SpellMoney\Contracts;

interface LanguageInterface
{
    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string;

    public function toWords(int $number): string;

    public function getCurrency(): string;

    public function getSubCurrency(): string;
}



================================================
FILE: src/Languages/Arabic.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class Arabic implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [0 => "صفر", 1 => "واحد", 2 => "اثنان", 3  => "ثلاثة", 4 => "أربعة", 5 => "خمسة",
        6                    => "ستة", 7 => "سبعة", 8 => "ثمانية", 9 => "تسعة", 10 => "عشرة", 11 => "أحد عشر", 12 => "اثنا عشر"];
    /**
     * @var array
     */
    private $tens = [20 => "عشرون", 30 => "ثلاثون", 40 => "أربعون", 50 => "خمسون",
        60                  => "ستون", 70  => "سبعون", 80  => "ثمانون", 90 => "تسعون"];
    /**
     * @var array
     */
    private $scales = [100 => "مائة", 1000 => "ألف", 1000000 => "مليون", 1000000000 => "مليار"];

    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string
    {
        $ar = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];
        $en = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        return str_replace($ar, $en, $number);
    }

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 13) {
            return $this->digits[$num];
        }

        if ($num < 100) {
            $t = intdiv($num, 10) * 10;
            $u = $num % 10;
            return ($u ? $this->digits[$u] . ' ' : '') . $this->tens[$t];
        }
        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . ' ' . $label;
                if ($rem) {
                    $out .= ' ' . $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "جنيه";}
    public function getSubCurrency(): string
    {return "قرش";}
}



================================================
FILE: src/Languages/Bangla.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class Bangla implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [
        0  => "শূন্য", 1  => "এক", 2     => "দুই", 3    => "তিন", 4    => "চার",
        5  => "পাঁচ", 6   => "ছয়", 7    => "সাত", 8    => "আট", 9     => "নয়",
        10 => "দশ", 11    => "এগারো", 12 => "বারো", 13  => "তেরো", 14  => "চৌদ্দ",
        15 => "পনেরো", 16 => "ষোল", 17   => "সতেরো", 18 => "আঠারো", 19 => "উনিশ",
    ];

    /**
     * @var array
     */
    private $tens = [
        20 => "বিশ", 30 => "ত্রিশ", 40 => "চল্লিশ", 50 => "পঞ্চাশ",
        60 => "ষাট", 70 => "সত্তর", 80 => "আশি", 90    => "নব্বই",
    ];

    /**
     * @var array
     */
    private $scales = [100 => "শত", 1000 => "হাজার", 100000 => "লাখ", 10000000 => "কোটি"];

    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string
    {
        $bn = ['০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯'];
        $en = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        return str_replace($bn, $en, $number);
    }

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 20) {
            return $this->digits[$num];
        }

        if ($num < 100) {
            $t = intdiv($num, 10) * 10;
            $u = $num % 10;
            return $this->tens[$t] . ($u ? ' ' . $this->digits[$u] : '');
        }
        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . ' ' . $label;
                if ($rem) {
                    $out .= ' ' . $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "টাকা";}
    public function getSubCurrency(): string
    {return "পয়সা";}
}



================================================
FILE: src/Languages/Chinese.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class Chinese implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [0 => "零", 1 => "一", 2 => "二", 3 => "三", 4  => "四", 5 => "五",
        6                    => "六", 7 => "七", 8 => "八", 9 => "九", 10 => "十"];
    /**
     * @var array
     */
    private $scales = [100 => "百", 1000 => "千", 10000 => "万", 100000000 => "亿"];

    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string
    {
        $cn = ['０', '１', '２', '３', '４', '５', '６', '７', '８', '９'];
        $en = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        return str_replace($cn, $en, $number);
    }

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 11) {
            return $this->digits[$num];
        }

        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . $label;
                if ($rem) {
                    $out .= $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "元";}
    public function getSubCurrency(): string
    {return "分";}
}



================================================
FILE: src/Languages/English.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class English implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [0 => "zero", 1      => "one", 2       => "two", 3      => "three", 4    => "four", 5 => "five",
        6                    => "six", 7       => "seven", 8     => "eight", 9    => "nine", 10    => "ten", 11 => "eleven", 12 => "twelve",
        13                   => "thirteen", 14 => "fourteen", 15 => "fifteen", 16 => "sixteen", 17 => "seventeen",
        18                   => "eighteen", 19 => "nineteen"];
    /**
     * @var array
     */
    private $tens = [20 => "twenty", 30  => "thirty", 40 => "forty", 50 => "fifty", 60 => "sixty",
        70                  => "seventy", 80 => "eighty", 90 => "ninety"];
    /**
     * @var array
     */
    private $scales = [100 => "hundred", 1000 => "thousand", 1000000 => "million", 1000000000 => "billion"];

    /**
     * @param string $number
     * @return mixed
     */
    public function normalizeNumber(string $number): string
    {return $number;}

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 20) {
            return $this->digits[$num];
        }

        if ($num < 100) {
            $t = intdiv($num, 10) * 10;
            $u = $num % 10;
            return $this->tens[$t] . ($u ? ' ' . $this->digits[$u] : '');
        }
        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . ' ' . $label;
                if ($rem) {
                    $out .= ' ' . $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "taka";}
    public function getSubCurrency(): string
    {return "paisa";}
}



================================================
FILE: src/Languages/Hindi.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class Hindi implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [0 => "शून्य", 1 => "एक", 2    => "दो", 3      => "तीन", 4   => "चार", 5    => "पांच",
        6                    => "छह", 7    => "सात", 8   => "आठ", 9      => "नौ", 10   => "दस", 11    => "ग्यारह", 12 => "बारह",
        13                   => "तेरह", 14 => "चौदह", 15 => "पंद्रह", 16 => "सोलह", 17 => "सत्रह", 18 => "अठारह", 19  => "उन्नीस"];
    /**
     * @var array
     */
    private $tens = [20 => "बीस", 30   => "तीस", 40   => "चालीस", 50 => "पचास", 60 => "साठ",
        70                  => "सत्तर", 80 => "अस्सी", 90 => "नब्बे"];
    /**
     * @var array
     */
    private $scales = [100 => "सौ", 1000 => "हज़ार", 100000 => "लाख", 10000000 => "करोड़"];

    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string
    {
        $hn = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];
        $en = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        return str_replace($hn, $en, $number);
    }

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 20) {
            return $this->digits[$num];
        }

        if ($num < 100) {
            $t = intdiv($num, 10) * 10;
            $u = $num % 10;
            return $this->tens[$t] . ($u ? ' ' . $this->digits[$u] : '');
        }
        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . ' ' . $label;
                if ($rem) {
                    $out .= ' ' . $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "रुपये";}
    public function getSubCurrency(): string
    {return "पैसा";}
}



================================================
FILE: src/Languages/Thai.php
================================================
<?php

namespace AzMolla\SpellMoney\Languages;

use AzMolla\SpellMoney\Contracts\LanguageInterface;

class Thai implements LanguageInterface
{
    /**
     * @var array
     */
    private $digits = [0 => "ศูนย์", 1 => "หนึ่ง", 2 => "สอง", 3 => "สาม", 4   => "สี่", 5 => "ห้า",
        6                    => "หก", 7    => "เจ็ด", 8  => "แปด", 9 => "เก้า", 10 => "สิบ"];
    /**
     * @var array
     */
    private $scales = [100 => "ร้อย", 1000 => "พัน", 10000 => "หมื่น", 100000 => "แสน", 1000000 => "ล้าน"];

    /**
     * @param string $number
     */
    public function normalizeNumber(string $number): string
    {
        $thai = ['๐', '๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙'];
        $eng  = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        return str_replace($thai, $eng, $number);
    }

    /**
     * @param int $num
     * @return mixed
     */
    public function toWords(int $num): string
    {
        if ($num == 0) {
            return $this->digits[0];
        }

        if ($num < 11) {
            return $this->digits[$num];
        }

        foreach (array_reverse($this->scales, true) as $value => $label) {
            if ($num >= $value) {
                $count = intdiv($num, $value);
                $rem   = $num % $value;
                $out   = $this->toWords($count) . ' ' . $label;
                if ($rem) {
                    $out .= ' ' . $this->toWords($rem);
                }

                return $out;
            }
        }
        return '';
    }

    public function getCurrency(): string
    {return "บาท";}
    public function getSubCurrency(): string
    {return "สตางค์";}
}



================================================
FILE: tests/SpellMoneyTest.php
================================================
<?php

use AzMolla\SpellMoney\Languages\Bangla;
use AzMolla\SpellMoney\Languages\English;
use AzMolla\SpellMoney\SpellMoney;
use PHPUnit\Framework\TestCase;

class SpellMoneyTest extends TestCase
{
    public function testBangla()
    {
        $spell = new SpellMoney(new Bangla());
        $this->assertStringContainsString('à¦Ÿà¦¾à¦•à¦¾', $spell->spell("à§§à§¨à§©"));
    }

    public function testEnglish()
    {
        $spell = new SpellMoney(new English());
        $this->assertStringContainsString('taka', $spell->spell(123));
    }
}



================================================
FILE: .github/workflows/tests.yml
================================================
name: Run PHPUnit Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [ "8.1", "8.2", "8.3" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none

      - name: Validate composer.json
        run: composer validate --strict

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run PHPUnit
        run: vendor/bin/phpunit --testdox


